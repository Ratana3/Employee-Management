┌─ 🔐 Employee Management System - ACTUAL Security Flow ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                                                                                                                                                      │
│ 👤 USER LOGIN REQUEST INITIATED                                                                                                                                                                                                                                     │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                       🌐 Frontend Login Form                                                                                                                                                              │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 👤 Employee Login (/):                               │ 🔐 Admin Login (/admin_login):                        │ 🌟 User Input Security:                                │ │ │
│ │ │ • Email: user@company.com                            │ • Email: admin@company.com                             │ • Content-Type: application/json validation            │ │ │
│ │ │ • Password: [hidden/masked input]                    │ • Password: [hidden/masked input]                     │ • CSRF exempt decorators where needed                  │ │ │
│ │ │ • No role selection (auto-determined)                │ • Role: HR/IT/super_admin (dropdown selection)        │ • JSON parsing with error handling                     │ │ │
│ │ │                                                       │ • Triple admin system support                         │ • Input validation for required fields                 │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│                                                                                   📡 AJAX POST Request (JSON)                                                                                                                                               │
│                                                                                               ▼                                                                                                                                                                  │
│ 🔍 STEP 1: REQUEST VALIDATION & PROCESSING                                                                                                                                                                                                                      │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      ⚙️ Flask Backend Processing                                                                                                                                                             │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ ✅ Current Security Measures:                        │ ❌ Missing Security Features:                         │ 📋 Input Validation:                                   │ │ │
│ │ │ • Content-Type validation (application/json)         │ • No rate limiting (vulnerable to brute force)       │ • All required fields validation                       │ │ │
│ │ │ • JSON parsing with error handling                   │ • No IP-based attack prevention                      │ • Password confirmation matching                        │ │ │
│ │ │ • CSRF token exemption where appropriate             │ • No geographic anomaly detection                    │ • Role ID integer validation                           │ │ │
│ │ │ • Request method validation                          │ • No account lockout after failed attempts           │ • Email format validation                              │ │ │
│ │ │ • Error logging and debugging                        │ • No progressive delay implementation                 │ • Password/confirm_password matching                   │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 🔐 STEP 2: DATABASE AUTHENTICATION                                                                                                                                                                                                                              │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      🗄️ Your Actual Database Queries                                                                                                                                                         │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 👤 Employee Authentication:                          │ 🔐 Admin Authentication:                             │ 🛡️ SQL Injection Status:                              │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ cursor.execute("""                                    │ # Super Admin Query:                                 │ ✅ SAFE: Using parameterized queries                   │ │ │
│ │ │   SELECT employee_id, password, account_status       │ cursor.execute("""                                   │ • cursor.execute("SELECT ... WHERE email = %s", (email,)) │ │ │
│ │ │   FROM employees WHERE email = %s                    │   SELECT super_admin_id, password_hash, role_id     │ • cursor.execute("UPDATE ... WHERE id = %s", (id,))   │ │ │
│ │ │ """, (email,))                                        │   FROM super_admins WHERE email = %s                │ • All database operations use proper parameters        │ │ │
│ │ │                                                       │ """, (email,))                                       │                                                         │ │ │
│ │ │ Account Status Validation:                            │                                                      │ 🔍 SQL Injection Prevention:                           │ │ │
│ │ │ • 'Activated' → Allow login                          │ # Regular Admin Query:                               │ • Never use string concatenation in SQL                │ │ │
│ │ │ • 'Deactivated' → 403 Forbidden                      │ cursor.execute("""                                   │ • Never use f-strings for SQL queries                  │ │ │
│ │ │ • 'Terminated' → 403 Forbidden                       │   SELECT admin_id, password, is_verified, role_id   │ • Always pass values as tuple parameters               │ │ │
│ │ │ • Other statuses → 403 Forbidden                     │   FROM admins WHERE email = %s AND role_id =        │ • Database treats user input as literal data           │ │ │
│ │ │                                                       │   (SELECT role_id FROM roles WHERE role_name = %s)  │                                                         │ │ │
│ │ │                                                       │ """, (email, role))                                  │                                                         │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 🔒 STEP 3: BCRYPT PASSWORD VERIFICATION                                                                                                                                                                                                                         │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      🔐 Your Actual Password Security                                                                                                                                                         │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 🔑 Registration Process:                             │ 🔒 Login Verification:                              │ 🛡️ Security Features:                                 │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ import bcrypt                                         │ # Employee Password Check:                           │ • Industry-standard bcrypt hashing                     │ │ │
│ │ │ salt = bcrypt.gensalt()                               │ if not bcrypt.checkpw(                              │ • Automatic salt generation (unique per password)      │ │ │
│ │ │ hashed_password = bcrypt.hashpw(                      │     password.encode('utf-8'),                       │ • Timing attack protection                             │ │ │
│ │ │     password.encode("utf-8"), salt                   │     hashed_password.encode('utf-8')                 │ • No plaintext password storage                        │ │ │
│ │ │ ).decode("utf-8")                                     │ ):                                                   │ • UTF-8 encoding consistency                           │ │ │
│ │ │                                                       │     return "Invalid password"                       │                                                         │ │ │
│ │ │ # Store in database                                   │                                                      │ Password Requirements:                                  │ │ │
│ │ │ cursor.execute("""                                    │ # Admin Password Check:                              │ • Client-side validation (frontend)                    │ │ │
│ │ │   INSERT INTO employees (password, ...)              │ if not bcrypt.checkpw(                              │ • Password confirmation matching                        │ │ │
│ │ │   VALUES (%s, ...)                                   │     password.encode('utf-8'),                       │ • Server-side validation                               │ │ │
│ │ │ """, (hashed_password, ...))                          │     hashed_password.encode('utf-8')                 │ • No password history checking yet                     │ │ │
│ │ │                                                       │ ):                                                   │                                                         │ │ │
│ │ │                                                       │     return "Incorrect password"                     │                                                         │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 🎫 STEP 4: JWT TOKEN GENERATION & MANAGEMENT                                                                                                                                                                                                                    │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      🎯 Your Actual JWT Implementation                                                                                                                                                        │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 🧑‍💼 Employee Token Generation:                        │ 🔐 Admin Token Generation:                          │ 🔄 Session Management:                                │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ jti = str(uuid.uuid4())                               │ jti = str(uuid.uuid4())                             │ Employee Session:                                       │ │ │
│ │ │ payload = {                                            │ payload = {                                          │ • Status changed to 'Active' on login                  │ │ │
│ │ │     'user_id': employee_id,                           │     'admin_id': admin_id,                           │ • Device info stored in devices table                  │ │ │
│ │ │     'role_id': role_id,                               │     'role': role,                                    │ • current_jti stored in employees table                │ │ │
│ │ │     'role_name': role_name,                           │     'role_id': role_id,                              │ • Status changed to 'Inactive' on logout              │ │ │
│ │ │     'jti': jti,                                       │     'admin_type': 'super_admin' or 'admin',         │ • JTI added to blacklisted_tokens table               │ │ │
│ │ │     'exp': utcnow() + timedelta(hours=8),             │     'jti': jti,                                      │                                                         │ │ │
│ │ │     'iat': utcnow()                                   │     'exp': utcnow() + timedelta(hours=8),            │ Admin Session:                                          │ │ │
│ │ │ }                                                     │     'iat': utcnow()                                  │ • JTI stored in admins/super_admins table              │ │ │
│ │ │                                                       │ }                                                    │ • No blacklisting (JTI comparison instead)            │ │ │
│ │ │ # 8-hour token validity                               │ # 8-hour token validity                             │ • 2FA state reset on logout                           │ │ │
│ │ │ # Device tracking integration                         │ # Support for super_admin + regular admin           │ • Audit logging for logout actions                    │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 🛡️ STEP 5: PERMISSION VALIDATION & ACCESS CONTROL                                                                                                                                                                                                              │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                    🔐 Your Actual Permission System                                                                                                                                                              │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 🎯 Decorator Usage:                                  │ 🗺️ Permission Architecture:                          │ 🔍 Permission Check Process:                           │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ @token_required_with_roles(                          │ routes table:                                        │ 1. Super Admin Override:                               │ │ │
│ │ │     required_actions=["delete_timesheet"]            │ • id: 5, route_name: "dashboard"                    │    if role == 'super_admin': return allow             │ │ │
│ │ │ )                                                     │ • id: 7, route_name: "attendanceandtimetracking"    │                                                         │ │ │
│ │ │ def delete_timesheet(admin_id, role, role_id):       │                                                      │ 2. Endpoint Resolution:                                │ │ │
│ │ │     # Route implementation                            │ actions table:                                       │    endpoint → ENDPOINT_TO_ROUTE_MAP → route_name      │ │ │
│ │ │                                                       │ • id: 800, action_name: "get_users_by_role"         │                                                         │ │ │
│ │ │ ENDPOINT_TO_ROUTE_MAP:                               │ • id: 804, action_name: "send_message"              │ 3. Database Permission Query:                          │ │ │
│ │ │ for endpoint in WORKFLOW_MANAGEMENT_ENDPOINTS:       │                                                      │    SELECT action_id FROM admin_route_actions          │ │ │
│ │ │     ENDPOINT_TO_ROUTE_MAP[endpoint] = "workflowmgmt" │ admin_route_actions table:                           │    WHERE admin_id = %s AND route_id = %s              │ │ │
│ │ │                                                       │ • admin_id: 20, route_id: 7, action_id: 826         │                                                         │ │ │
│ │ │ Required Actions Examples:                            │ • admin_id: 20, route_id: 7, action_id: 812         │ 4. Permission Logic:                                   │ │ │
│ │ │ • ["delete_timesheet"] - Single action               │                                                      │    require="any": any action granted = access         │ │ │
│ │ │ • ["edit_timesheet", "view_timesheet"] - Multiple    │ Permission Flow:                                     │    require="all": all actions needed = access         │ │ │
│ │ │ • require="any" or require="all"                     │ 1. routes → 2. actions → 3. route_actions →         │                                                         │ │ │
│ │ │                                                       │ 4. admin_route_actions (individual permissions)     │ 5. Verification Check:                                │ │ │
│ │ │                                                       │                                                      │    SELECT is_verified FROM admins WHERE admin_id = %s │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 📱 STEP 6: 2FA VERIFICATION (When Required)                                                                                                                                                                                                                     │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      🔐 Your Actual 2FA Implementation                                                                                                                                                          │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 👤 Employee 2FA:                                     │ 🔐 Admin 2FA:                                       │ 🛡️ Security Features:                                 │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ Route: /employee/verify-2fa                          │ Route: /verify-2fa                                  │ • 6-digit random code generation                       │ │ │
│ │ │ Decorator: @employee_jwt_required()                  │ Super Admin: Bypasses all 2FA                       │ • Email delivery via Flask-Mail                        │ │ │
│ │ │ Code Storage: two_factor_verifications table         │ Admin Bypass Routes: ["/dashboard"]                 │ • 5 failed attempts limit per 5 minutes               │ │ │
│ │ │ Validity: 10-minute window after verification        │ Code Storage: two_factor_verifications table        │ • 10-minute validity window                            │ │ │
│ │ │ Resend: /employee/resend-2fa-code                    │ Validity: 10-minute window after verification       │ • Database logging of all attempts                     │ │ │
│ │ │                                                       │ Resend: /resend-2fa-code                            │ • AJAX/JSON response support                           │ │ │
│ │ │ Usage with Decorators:                               │                                                      │                                                         │ │ │
│ │ │ @require_employee_2fa                                │ Usage with Decorators:                              │ 2FA Database Schema:                                   │ │ │
│ │ │ def sensitive_employee_function():                   │ @require_2fa_admin                                   │ two_factor_verifications table:                       │ │ │
│ │ │     # Protected function                             │ def sensitive_admin_function():                      │ • admin_id/employee_id                                 │ │ │
│ │ │                                                       │     # Protected function                             │ • verification_code (6 digits)                        │ │ │
│ │ │ Advanced Usage:                                       │                                                      │ • is_verified (boolean)                               │ │ │
│ │ │ @token_required_with_roles_and_2fa(                  │ Advanced Usage:                                      │ • verification_timestamp                               │ │ │
│ │ │     required_actions=["delete_employee"]             │ @token_required_with_roles_and_2fa(                 │                                                         │ │ │
│ │ │ )                                                     │     required_actions=["delete_employee"]            │                                                         │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                               ▼                                                                                                                                                                  │
│ 📊 STEP 7: DATA ACCESS & AUDIT LOGGING                                                                                                                                                                                                                          │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │                                                                      📋 Your Actual Logging & Access                                                                                                                                                           │ │
│ │ ┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ │
│ │ │ 📊 Audit Logging:                                   │ 📈 Tracking Systems:                                │ 🔒 Security Monitoring:                               │ │ │
│ │ │                                                       │                                                      │                                                         │ │ │
│ │ │ log_audit(admin_id, role, "delete_timesheet",        │ Device Tracking (Employee):                          │ Current Monitoring:                                     │ │ │
│ │ │          f"Deleted timesheet ID {timesheet_id}")     │ • device_name, device_os                            │ • Comprehensive debug logging                          │ │ │
│ │ │                                                       │ • browser_name, browser_version                     │ • Login/logout audit trails                           │ │ │
│ │ │ Session Tracking:                                     │ • ip_address, jti, issued_at                        │ • 2FA attempt logging                                 │ │ │
│ │ │ • Employee status: Active/Inactive                   │                                                      │ • Failed login attempt tracking                       │ │ │
│ │ │ • Admin 2FA state management                         │ Token Lifecycle:                                     │ • Device information collection                        │ │ │
│ │ │ • Login/logout timestamp tracking                    │ • JWT generation with unique JTI                     │                                                         │ │ │
│ │ │                                                       │ • JTI validation on each request                    │ Missing Monitoring:                                     │ │ │
│ │ │ Database Operations:                                  │ • Token blacklisting (employees)                    │ • Rate limiting alerts                                │ │ │
│ │ │ • All queries use parameterized statements           │ • JTI reset (admins)                                │ • IP-based attack detection                           │ │ │
│ │ │ • Proper connection handling                          │ • Concurrent session management                      │ • Geographic anomaly alerts                           │ │ │
│ │ │ • Error logging with stack traces                    │                                                      │ • Account lockout notifications                       │ │ │
│ │ └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                                                                                                                                                                                                      │
│ 🚨 SECURITY THREATS & YOUR CURRENT DEFENSES                                                                                                                                                                                                                     │
│ ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │
│ │ ✅ Well Protected Against:                           │ ⚠️ Partially Protected:                              │ ❌ Vulnerable To:                                      │ │
│ │ • SQL Injection (parameterized queries)              │ • Session hijacking (JTI validation helps)          │ • Brute force attacks (no rate limiting)              │ │
│ │ • Password attacks (bcrypt + salt)                   │ • CSRF (some protection, not comprehensive)         │ • Distributed attacks (no IP limiting)                │ │
│ │ • Token replay (JTI validation)                      │ • Input validation (basic validation present)       │ • Account enumeration (timing attacks)                │ │
│ │ • Unauthorized access (permission system)            │ • XSS (some content-type validation)                │ • Denial of service (no resource limits)              │ │
│ │ • Session fixation (new JTI per login)               │                                                      │ • Advanced persistent threats                          │ │ │
│ │ • Privilege escalation (granular permissions)        │                                                      │ • Social engineering (human factor)                   │ │
│ └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘ │
│                                                                                                                                                                                                                                                                      │
│ 🎯 SECURITY ARCHITECTURE STRENGTHS:                                                                                                                                                                                                                             │
│ ✅ Enterprise-Level Authentication: JWT + bcrypt + 2FA + granular permissions                    ✅ Sophisticated Session Management: JTI validation + blacklisting + device tracking           │
│ ✅ SQL Injection Protection: Consistent parameterized queries throughout                         ✅ Comprehensive Logging: Audit trails + debug logging + error tracking                        │
│ ✅ Multi-Layered Access Control: Role + action + route + verification checks                     ✅ Scalable Permission System: Database-driven + flexible decorator architecture                │
│ ✅ Secure Token Lifecycle: Generation + validation + revocation + expiration                     ✅ Modern Security Practices: Industry standards + proper error handling                        │
│                                                                                                                                                                                                                                                                      │
│ 🔧 RECOMMENDED FUTURE SECURITY ENHANCEMENTS:                                                                                                                                                                                                                           │
│ 1. 🚦 Rate Limiting: Implement Flask-Limiter for brute force protection                         3. 🔒 Input Sanitization: Add comprehensive XSS protection                                    │
│ 2. 🛡️ Account Lockout: Add progressive delays and temporary lockouts                            4. 📊 Security Monitoring: Real-time attack detection and alerting                            │
│                                                                                                                                                                                                                                                                      │
│ 💼 Portfolio Highlight: Your system demonstrates advanced security architecture with enterprise-level authentication, authorization, and session management capabilities                                                                                        │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘